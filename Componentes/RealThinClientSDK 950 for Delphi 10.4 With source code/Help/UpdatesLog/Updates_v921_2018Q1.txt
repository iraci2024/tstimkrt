You can find information on updating the RTC SDK components in the "Readme.txt" file.

*******************************************************************
*                                                                 *
* RealThinClient SDK v9.21 (2018.Q1), released February 2nd 2018. *
*                                                                 *
*******************************************************************

!!IMPORTANT!! In the RTC SDK v9.00 update, some breaking changes were introduced.
If you are updating from any older RTC SDK version (v6.x, v7.x or v8.x), read the
"Updates_v900_2017Q4.txt" file if you get any compile errors in your Project(s)!

---------------------------------------------------------
* Changes between v9.00 and v9.21 (2018.Q1)
---------------------------------------------------------

1. "RTCSDK_VERSION" constant is now declared in a separate "rtc_Version.inc"
   file and included in the "rtcTypes.pas" unit, eliminating the need
   to modify the "rtcTypes.pas" unit (or the new "rtcTypes.inc" file)
   every time there is an update released for the RTC SDK.

2. Fixed a bug in the socket-based HTTP Client connection provider, which 
   resulted in a connection used to receive a Response in a "chunked" Transfer 
   Encoding to be closed by the Client immediately after receiving the Response. 
   Now, multiple Request/Response loops are possible using the same connection,
   even if the Server is using "chunked" Transfer Encoding to send Responses.

3. "rtcWinHttpSys.pas" unit added to the "Lib" folder, introducing new functions 
   for Low-Level access to the Windows HTTP Server API. There are no components 
   and no classes in this unit, but types and functions which directly access 
   the Microsoft HTTP Server API. 

   An Example Project was added to the "Examples/Raw_HttpServer" folder, showing
   how the "rtcWinHttpSys" unit can be used with the "TRtcQuickJob" component to
   write a balanced Multi-Threaded HTTP Server using the Windows HTTP Server API.
   
   For a complete list of all available functions in this new unit, check the 
   "interface" section of the "rtcWinHttpSys.pas" unit in the "Lib" folder.
   
4. Updated "rtcSTMTPlugin.pas" unit and "rtcSDK_STMT.dpk" package to compile 
   with StreamSec Tools 4.0 and use the package file for Delphi 2010 by default, 
   since StreamSec Mobile components are now an integral part of StreamSec Tools 4.0
   and Delphi 2010 is the oldest Delphi version supported by StreamSec Mobile components.
 
5. Removed deprecated "rtcSTMTTest.pas" unit from the "LibPlugins" folder.
   Please, use the "rtcSSecTest.pas" unit instead of "rtcSTMTTest.pas" and 
   update $DEFINE's at the top of the unit to match your StreamSec version.

6. Updated SSL/TLS certificates used by StreamSec Demos to work correctly with the 
   current latest versions of "Google Chrome" and "Mozilla Firefox" Web Browsers.

7. Moved low-level functions for direct "WinInet" and "WinHTTP" Client API access
   from higher-level "rtcWInetHttpCliProv.pas" and "rtcWinHttpCliProv.pas" units 
   to new low-level "rtcWInetHttp.pas" and "rtcWinHttp.pas" units (respectively).
   
8. Removed the default connection count limiter (declared in the "rtcConn.pas" unit), which 
   was previously meant as a "safety net" and was set to 50.000 connections, after which 
   exceptions would be raised and the Server would refuse new connections from Clients.
   
   If you want to set a limit for the maximum number of connections for your Application, change
   "RTC_CONNECTION_LIMIT", "RTC_CLIENT_CONNECT_LIMIT" and/or "RTC_SERVER_ACCEPT_LIMIT" variables, 
   which are still declared in the "rtcConn.pas" unit, but are set to zero by default (no limit).

9. To improve compatibility with 3rd-party Clients and Servers, properties of "TRtcRequest" 
   and "TRtcResponse" classes used for preparing HTTP Headers were updated to send Header 
   names in a "Mixed-Case" format instead of "UPPERCASE".
   
   Property              | was (old)         | is now (new)
   ----------------------+-------------------+----------------
   Request.Host          | 'HOST'            | 'Host'
   Request.Agent         | 'USER-AGENT'      | 'User-Agent'
   Request.Referer       | 'REFERER'         | 'Referer'
   Request.ForwardedFor  | 'X-FORWARDED-FOR' | 'X-Forwarded-For'
   Request.ContentType   | 'CONTENT-TYPE'    | 'Content-Type'
   Request.ContentLength | 'CONTENT-LENGTH'  | 'Content-Length'
   Request.Cookie        | 'COOKIE'          | 'Cookie'
   Response.Cookie       | 'SET-COOKIE'      | 'Set-Cookie'

10. To fix incompatibility problems with Servers which do NOT support multiple "COOKIE" 
    headers in a single Request (like "PHP", for example), "TRtcRequest" class was updated 
    to place all Request Cookies into a single HTTP header (separating each entry by "; ").
   
11. Status page generated by RTC Gateway components (/$s) extended to include more
    detailed information about Gate Clients and the current state of the Gateway.

12. Optimized the "PING" functionality on RTC Gateway components, which is responsible for 
    keeping connections to Gate Clients "alive", when no other data is prepared for sending.
   
13. Fixed a bug in RTC Gateway components (TRtcGateway and TRtcHttpGateway), which often
    resulted in "Subscriptions" to become "messed-up" on the Gateway after a disconnect
    (Users were being reported as "Active", long after they've already disconnected).

14. Fixed the "TRtcGateway" component to work correctly with multiple Servers 
    attached to the "Link" property (using the "TRtcDualDataServerLink" component).
   
15. "TRtcGateway" and "TRtcHttpGateway" components were changing Timeout 
    parameters of the assigned "TRtcHttpServer" component (Server property).
    Because the Gateway already had its own checks for idle connections, but 
    these Timeout values were also affecting code unrelated to the Gateway,
    Gateway components will NO LONGER be changing Timeouts on the Server.
   
16. Fixed a bug in RTC Gateway components (TRtcGateway and TRtcHttpGateway), which sometimes
    resulted in the "Friends lists" to become "messed-up" on the Gateway after a disconnect.

17. "ServerProtocol" property (default="rtc_Http1"; declared in the "rtcInfo.pas" unit)
    was added to "TRtcHttpClient" and "TRtcHttpServer" components, to start preparing
    for HTTP/2 support (NOT FULLY IMPLEMENTED YET!).

    NO CHANGES are required for RTC components to continue working over HTTP/1.x (as before). 
    By default, all components will be using connection providers which have already been 
    stress-tested to work reliably over HTTP/1.0 and HTTP/1.1, without support for HTTP/2!

    NOTE: Because HTTP/2 support is NOT FULLY IMPLEMENTED YET, setting the "ServerProtocol" 
    property to anything else than "rtc_Http1" is most likely going to cause you problems.
    To ensure that this property is NOT changed by mistake before HTTP/2 support is ready, 
    an exception will be raised with a message "Only HTTP/1 is currently supported" if 
    you do try setting that property to "rtc_Http2" before HTTP/2 support is available.
     
18. To make decisions based on the protocol negotiated in a SSL/TLS handshake
    possible before sending any "user" data to the remote peer (required by
    Clients and Servers negotiating the use of HTTP/2 or HTTP/1.x over SSL),
    connection providers using 3rd-party components for SSL/TLS encryption 
    were modified to trigger the "OnConnect" event only AFTER a successful 
    SSL/TLS handshake (once the protocol was negotiated and the connection 
    can be used to send and receive encrypted data), instead of triggering
    immediately after a TCP/IP connection has been established.
   
    In other words, if you are using 3rd-party components for SSL/TLS encryption,
    you will no longer see the "OnConnect" and/or the "OnDisconnect" events for 
    connections where the SSL/TLS handshake did NOT finish without errors, but 
    ... you will still see these connections in your SSL/TLS error logs, and 
    ... you can still use the "OnConnecting" and "OnDisconnecting" events if 
    you want to monitor opening and closing of raw TCP/IP connections, while 
    the "OnConnect" even (and later also "OnDisconnect") will ONLY be triggered
    for connections (encrypted using SSL/TLS) after a successful SSL/TLS handshake.
   
    NOTE: A successful SSL/TLS handshake does NOT guarantee that a connection will
    remain open, but it does mean that a Client and a Server have established a
    working connection and exchanged enough data for encrypted communication.

19. The following properties were introduced in "TRtcRequest" and/or 
    "TRtcResponse" classes: "Scheme", "Scheme_Type", "_Type", "ItemType", 
    "Cookie_Type", "Method_Type", "URI_Type", "Host_Type" and "Status_Type".
   
     All "*Type" properties are using the new "TRtcHeaderFieldType", which is
     declared in "rtcInfo.pas" unit and lists all "indexing" and "compression"
     combinations supported for encoding HTTP Header Fields when using HTTP/2.

     NOTE: "Path", "Path_Type", "Authority" and "Authority_Type" were also added, 
     but these are simply alises for "URI", "URI_Type", "Host" and "Host_Type".
   
20. To simplify preparing Request and Response Headers, the following 
    global variables have been introduced in the "rtcInfo.pas" unit:
    "RTC_HT_SchemeDefault", "RTC_HT_MethodDefault", "RTC_HT_URIDefault",
    "RTC_HT_CookieDefault", "RTC_HT_StatusDefault", "RTC_HT_Default" and
    "RTC_HTTP2_HostIsAuthority". 
     
    When the "RTC_HTTP2_HostIsAuthority" global variable is set to TRUE 
    (default), the "Host" header field will be encoded as the ":authority" 
    pseudo-header field when using HTTP/2. Otherwise, the "Host" header 
    field will be encoded as a "host" field in HTTP/2.

21. "HeaderText", "Value" and "ItemValue" properties on "TRtcRequest" and 
    "TRtcResponse" classes were updated to support assignments of HTTP/2 
    pseudo-header fields in addition to "standard" fields. To make the 
    use of HTTP/1 and HTTP/2 interchangeable, the "Value" and "ItemValue"
    properties can also be used to read HTTP/2 pseudo-header fields, but 
    the "HeaderText" property will NOT return HTTP/2 pseudo-header-fields.

22. Added "HPACK_Encode" and "HPACK_Decode" functions to the "rtcInfo.pas" 
    unit, providing a 100% native Delphi implementation of HPACK (Header Field 
    Compression and Decompression for HTTP/2), which will be used internally 
    by RTC connection providers for encoding and decoding of HTTP/2 Headers.

23. "TRtcCryptPluginState" and "TRtcCryptPluginProtocol" types in the "rtcPlugins.pas" 
    unit were extended with "cpsReady2" and "cppHttp2" options (respectively), to 
    support HTTP protocol version negotiation when using 3rd-party encryption plug-ins 
    for SSL/TLS encryption. This is required to make HTTP/2 optional, without breaking 
    backwards compatibility with HTTP/1.
   
24. Added "tRtcDynamicHeaderTable" class to the "rtcSystem.pas" unit, implementing a
    Dynamic Header Table as described in RFC 7541 (HPACK: Header Compression for HTTP/2).

25. Added "Lower_Case", "Lower_WCase", "LInt_EncodeEx", "LInt_DecodeEx", "LWord_EncodeEx", 
    "LWord_DecodeEx", "Huff_CheckLength", "Huff_Encode", "Huff_EncodeEx", "Huff_Decode" 
    and "Huff_DecodeEx" functions to the "rtcSystem.pas" unit. These are internal 
    utility functions, used while Encoding and Decoding HTTP/2 Headers using HPACK.
